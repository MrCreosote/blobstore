// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import auth "github.com/kbase/blobstore/auth"
import logrus "github.com/sirupsen/logrus"
import mock "github.com/stretchr/testify/mock"

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: le, token
func (_m *Provider) GetUser(le *logrus.Entry, token string) (*auth.User, int64, int, error) {
	ret := _m.Called(le, token)

	var r0 *auth.User
	if rf, ok := ret.Get(0).(func(*logrus.Entry, string) *auth.User); ok {
		r0 = rf(le, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*logrus.Entry, string) int64); ok {
		r1 = rf(le, token)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(*logrus.Entry, string) int); ok {
		r2 = rf(le, token)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*logrus.Entry, string) error); ok {
		r3 = rf(le, token)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ValidateUserNames provides a mock function with given fields: le, userNames, token
func (_m *Provider) ValidateUserNames(le *logrus.Entry, userNames *[]string, token string) (int, error) {
	ret := _m.Called(le, userNames, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *[]string, string) int); ok {
		r0 = rf(le, userNames, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, *[]string, string) error); ok {
		r1 = rf(le, userNames, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
