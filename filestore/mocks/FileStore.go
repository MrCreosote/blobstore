// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import filestore "github.com/kbase/blobstore/filestore"
import logrus "github.com/sirupsen/logrus"
import mock "github.com/stretchr/testify/mock"

// FileStore is an autogenerated mock type for the FileStore type
type FileStore struct {
	mock.Mock
}

// CopyFile provides a mock function with given fields: sourceID, targetID
func (_m *FileStore) CopyFile(sourceID string, targetID string) (*filestore.FileInfo, error) {
	ret := _m.Called(sourceID, targetID)

	var r0 *filestore.FileInfo
	if rf, ok := ret.Get(0).(func(string, string) *filestore.FileInfo); ok {
		r0 = rf(sourceID, targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filestore.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sourceID, targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: id
func (_m *FileStore) DeleteFile(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: id
func (_m *FileStore) GetFile(id string) (*filestore.GetFileOutput, error) {
	ret := _m.Called(id)

	var r0 *filestore.GetFileOutput
	if rf, ok := ret.Get(0).(func(string) *filestore.GetFileOutput); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filestore.GetFileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFile provides a mock function with given fields: le, p
func (_m *FileStore) StoreFile(le *logrus.Entry, p *filestore.StoreFileParams) (*filestore.FileInfo, error) {
	ret := _m.Called(le, p)

	var r0 *filestore.FileInfo
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *filestore.StoreFileParams) *filestore.FileInfo); ok {
		r0 = rf(le, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filestore.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, *filestore.StoreFileParams) error); ok {
		r1 = rf(le, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
