// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import nodestore "github.com/kbase/blobstore/nodestore"
import uuid "github.com/google/uuid"

// NodeStore is an autogenerated mock type for the NodeStore type
type NodeStore struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: id
func (_m *NodeStore) DeleteNode(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNode provides a mock function with given fields: id
func (_m *NodeStore) GetNode(id uuid.UUID) (*nodestore.Node, error) {
	ret := _m.Called(id)

	var r0 *nodestore.Node
	if rf, ok := ret.Get(0).(func(uuid.UUID) *nodestore.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nodestore.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: accountName
func (_m *NodeStore) GetUser(accountName string) (*nodestore.User, error) {
	ret := _m.Called(accountName)

	var r0 *nodestore.User
	if rf, ok := ret.Get(0).(func(string) *nodestore.User); ok {
		r0 = rf(accountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nodestore.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodePublic provides a mock function with given fields: id, public
func (_m *NodeStore) SetNodePublic(id uuid.UUID, public bool) error {
	ret := _m.Called(id, public)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) error); ok {
		r0 = rf(id, public)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreNode provides a mock function with given fields: node
func (_m *NodeStore) StoreNode(node *nodestore.Node) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nodestore.Node) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
